{% extends "layouts/main.njk" %}

{% block slides %}
<section>
    <h1>CMPUT 404</h1>
    <h3>Web Applications and Architecture</h3>
    <h2>REST</h2>
    <p>
        <small>Created by <br>
            <a href="http://softwareprocess.es">Abram Hindle</a>
            (<a href="mailto:abram.hindle@ualberta.ca">abram.hindle@ualberta.ca</a>) <br> and Hazel Campbell (<a
                href="mailto:hazel.campbell@ualberta.ca">hazel.campbell@ualberta.ca</a>).<br> Copyright 2014-2023.
        </small>
    </p>
</section>
<section style="font-size: 80%;">
    <h3><b>RE</b>presentational <b>S</b>tate <b>T</b>ransfer</h3>
    <ul>
        <li>Representational
            <ul>
                <li>
                    Describe, name, show
                </li>
            </ul>
        </li>
        <li>
            State
            <ul>
                <li>
                    The current values of variables, properties, fields
                </li>
                <li>
                    Accumulation of the results of past changes
                </li>
            </ul>
        </li>
        <li>
            Transfer
            <ul>
                <li>
                    Sent from computer to computer, or from service to service
                </li>
                <li>
                    Communication
                </li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>REST</h3>
    <ul>
        <li>
            Architectural style
            <ul>
                <li>Think design patterns for a software system architecture</li>
            </ul>
        </li>
        <li>
            Introduced by Fielding's <a href="https://ics.uci.edu/~fielding/pubs/dissertation/top.htm">Dissertation</a>
        </li>
        <li>
            Now so common, it's usually just implied and not discussed explicitly
        </li>
    </ul>
</section>
<section>
    <h3>REST Architecture</h3>
    <ul>
        <li>Client/Server</li>
        <li>Stateless
            <ul>
                <li>The server does not need to track the state of the client</li>
            </ul>
        </li>
        <li>Cacheable</li>
        <li>Uniform interface</li>
        <li>Layered</li>
    </ul>
</section>
<section>
    <h3>REST Basics</h3>
    <ul>
        <li>
            Use URIs (URLs) to "name" objects
            <ul>
                <li>Java/JS/Python/database objects!</li>
            </ul>
        </li>
        <li>
            Use HTTP methods as verbs to manipulate them
            <ul>
                <li>GET - get the state of an object</li>
                <li>PUT - set the (entire) state of an object</li>
                <li>PUT - create an object</li>
                <li>DELETE - delete an object</li>
                <li>POST - manipulate an object some other way</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>REST is not RPC</h3>
    <ul>
        <li>RPC - Remote Procedure Calls</li>
        <li>Call a procedure (function/method) over the network</li>
        <li>Same semantics as calling a function!
            <ul>
                <li>Inputs</li>
                <li>Outputs</li>
            </ul>
        </li>
        <li>But, that function runs on a different computer.</li>
        <li>Rest thinks about <em>objects not functions</em></li>
    </ul>
</section>
<section>
    <h3>REST is not RPC</h3>
    <ul>
        <li>Stateless</li>
        <li>Client maintains its own state</li>
        <li>Server does not track clients at all</li>
        <li>Requests are big
            <ul>
                <li>Lots of context</li>
                <li>All the fields/properties
                    <ul>
                        <li>Maybe recursively!</li>
                    </ul>
                </li>
                <li>Client must send all relevant state</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>REST is not RPC</h3>
    <ul>
        <li>Stateless</li>
        <li>Server maintains only state relevant to core DATA MODEL objects</li>
        <li>Client maintains state like
            <ul>
                <li>Position in a sequence (UI flow)</li>
                <li>Logged in & identity</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>REST is not RPC</h3>
    <ul>
        <li>Uses a generic interface with standard semantics: HTTP</li>
        <li>GET always gets the state of an object</li>
        <li>PUT always sets the state of an object
            <ul>
                <li>Create it if it doesn't exist</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>REST is not RPC</h3>
    <ul>
        <li>Transformable: You can stick proxies in between the client/server
            <ul>
                <li>Caches</li>
                <li>Load balancers</li>
                <li>Failover</li>
                <li>...</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>Caching REST</h3>
    <ul>
        <li>Client can cache responses</li>
        <li>Can also insert a caching reverse proxy</li>
        <li>If the entity doesn't change, why request it again?</li>
        <li>What methods are cacheable?
            <ul>
                <li>GET? Yes!</li>
                <li>POST? No :(</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>
        Layering REST
    </h3>
    <img src="/images/rest_layers.svg">
</section>
<section>
    <h3>Layering REST</h3>
    <ul>
        <li>
            Your application may not be multi-machine
        </li>
        <li>But it can still have layering that uses HTTP</li>
        <li>Example: Separate layer that just handles and validates authentication, before passing it off to the next layer</li>
        <li>Example: Stateless routing some requests to a different process (db1, db2)</li>
    </ul>
</section>
<section>
    <h3>Types of requests</h3>
    <ul>
        <li>Repeatable - doing it twice in a row is same as doing it once
            <ul>
                <li>Idempotent</li>
            </ul>
        </li>
        <li>Stateless - the request/response itself contains all necessary state information</li>
        <li>Cacheable - the results are the same for some period of time</li>
        <li>Safe - doesn't cause any change</li>
    </ul>
</section>
<section>
    <h3>HTTP Methods in REST</h3>
    <table>
        <thead>
            <tr>
                <td></td>
                <td>GET</td>
                <td>PUT</td>
                <td>DELETE</td>
                <td>POST</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Repeatable</td>
                <td>Yes</td>
                <td>Yes</td>
                <td>Yes</td>
                <td>Maybe</td>
            </tr>
            <tr>
                <td>Stateless</td>
                <td>Yes</td>
                <td>Yes</td>
                <td>Yes</td>
                <td>Maybe</td>
            </tr>
            <tr>
                <td>Cacheable</td>
                <td>Yes</td>
                <td>Yes</td>
                <td>Yes</td>
                <td>No</td>
            </tr>
            <tr>
                <td>Safe</td>
                <td>Yes</td>
                <td>No</td>
                <td>No</td>
                <td>No</td>
            </tr>
        </tbody>
    </table>
</section>
<section>
    <h3>Example: Search Query</h3>
    <ul>
        <li>Is it Repeatable?</li>
        <li>Is it Stateless?</li>
        <li>Is it Cacheable?</li>
        <li>Is it Safe?</li>
    </ul>
</section>
<section>
    <h3>Example: Check the weather</h3>
    <ul>
        <li>Is it Repeatable?</li>
        <li>Is it Stateless?</li>
        <li>Is it Cacheable?</li>
        <li>Is it Safe?</li>
    </ul>
</section>
<section>
    <h3>Example: Add a photo to gallery</h3>
    <ul>
        <li>Is it Repeatable?</li>
        <li>Is it Stateless?</li>
        <li>Is it Cacheable?</li>
        <li>Is it Safe?</li>
    </ul>
</section>
<section>
    <h3>Example: Make a payment to a shop</h3>
    <ul>
        <li>Is it Repeatable?</li>
        <li>Is it Stateless?</li>
        <li>Is it Cacheable?</li>
        <li>Is it Safe?</li>
    </ul>
</section>
<section>
    <h3 style="font-size: 90%;">
        Session Cookie Authentication: is it REST?
    </h3>
    <img src="/images/sessionauth.svg" class="stretch">
</section>
<section>
    <h3 style="font-size: 90%;">
        Signed Token Authentication: is it REST?
    </h3>
    <img src="/images/token_auth.svg" class="stretch">
</section>
<section>
    <h3>Why REST?</h3>
    <ul>
        <li>Reliability</li>
        <li>Scalability</li>
        <li>Latencies</li>
        <li>Efficiency</li>
        <li>Distributed</li>
    </ul>
</section>
<section>
    <h3>REST Reliability</h3>
    <ul>
        <li>Allow more than 1 machine to handle the same task
            <ul>
                <li>If 1 machine dies, we can send requests to another</li>
            </ul>
        </li>
        <li>
            Server doesn't have to track client state
            <ul>
                <li>Can't get out of sync</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>REST Scalability</h3>
    <ul>
        <li>Sharding 
            <ul>
                <li>Split data across multiple machines</li>
                <li>More capacity + more performance</li>
            </ul>
        </li>
    </ul>
    <img class="stretch" src="/images/shards.svg">
</section>
<section>
    <h3>REST Latency</h3>
    <ul>
        <li>Caching decreases latency
            <ul>
                <li>Every layer can have caching</li>
            </ul>
        </li>
        <li>Multiple layers increases latency</li>
    </ul>
    <img class="stretch" src="/images/rest_layers_caches.svg">
</section>
<section>
    <h3>REST Efficiency</h3>
    <ul>
        <li>Higher bandwidth
            <ul>
                <li>Every request needs contain all relevant state & context</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>REST Distributed</h3>
    <ul>
        <li>Separate concerns -> separate servers
            <ul>
                <li>"Microservices"</li>
            </ul>
        </li>
        <li>
            State distributed between server and client
        </li>
    </ul>
</section>
<section>
    <h3>Designing REST</h3>
    <ul>
        <li>What is read-only vs read-write</li>
        <li>What is public vs needs to be authenticated</li>
        <li>What relationships can become URIs?</li>
    </ul>
</section>
<section>
    <h3>Designing REST</h3>
    <ul>
        <li>Take advantage of caching
            <ul>
                <li>Prefer GET & Avoid POST</li>
            </ul>
        </li>
        <li>Can a single object be split up into separate objects with separate URLs?</li>
        <li>Can something be stored client-side instead of on the server?
            <ul>
                <li>Remember: the client side is the fastest side!</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <p>Use nouns for paths, not verbs!</p>
    <ul>
        <li><code>getRecipeInstructions()</code> → GET <code>api/v1/recipes/1234</code></li>
    </ul>
</section>
<section>
    <p>Plural nouns for paths if its a Collection</p>
    <ul>
        <li>Arrays/Lists/Vectors</li>
        <li>Mappings/Dictionaries</li>
        <li>Sets</li>
        <li><code>getAllRecipes()</code> → <code>GET api/v1/recipes/</code></li>
    </ul>
</section>
<section>
    <p>Sub-directories (sub-folders) for hierarchies</p>
    <ul>
        <li><code>api/v1/recipes/1243/versions/2</code></li>
    </ul>
</section>
<section>
    <p>Use HTTP error codes</p>
    <img class="stretch" src="/images/200404.jpg">
</section>
<section style="font-size: 90%;">
    <p>Use HTTP error codes</p>
    <ul>
        <li>GET → 200 OK</li>
        <li>New object via PUT or POST → 201 Created</li>
        <li>DELETE → 204 No Content</li>
        <li>Needs authentication → 401 Unauthorized</li>
        <li>Bad JSON or missing/extra properties or bad value → 400 Bad Request</li>
        <li>POST to an endpoint that only understands GET & PUT → 405 Method Not Allowed</li>
    </ul>
</section>
<section>
    <h3>HATEOAS</h3>
    <ul>
        <li><b>H</b>ypermedia <b>A</b>s <b>T</b>he <b>E</b>ngine of <b>A</b>pplication <b>S</b>tate</li>
        <li>Include <b>hyperlinks</b> in your REST API responses!</li>
    </ul>
    <pre><code>{% filter prexample %}
        GET api/v1/recipes/1243/versions/2
    {% endfilter %}</code></pre>
    <pre><code>{% filter prexample %}
        {
            "ingredients": [
                {
                    "name": "Flour",
                    "link": "/api/v1/ingredients/27"
                },
                ...
            ],
            ...
        }
    {% endfilter %}</code></pre>
</section>
<section>
    <h3>More REST tips</h3>
    <ul>
        <li>Vinay Sahni's <a href="https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api">Best Practices for Designing a Pragmatic RESTful API</a></li>
        <li>StackOverflow's <a href="https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/">Best practices for REST API design</a></li>
        <li>Richardson's <a href="https://go.oreilly.com/university-of-alberta/library/view/-/9781449359713/?ar">RESTful Web APIs</a> Book</li>
        <li>Richardson & Ruby's <a href="https://go.oreilly.com/university-of-alberta/library/view/-/9780596529260/?ar">RESTful Web Services</a> Book</li>
        <li>Allamaraju's <a href="https://learning.oreilly.com/library/view/restful-web-services/9780596809140/?sso_link=yes&sso_link_from=university-of-alberta">RESTful Web Services Cookbook</a></li>
    </ul>
</section>
<section>
    <h3>More REST tips</h3>
    <ul>
        <li>SOAP vs REST <a href="http://www.youtube.com/watch?v=v3OMEAU_4HI">Video</a></li>
        <li>Fredrich's Intro to REST <a href="http://www.youtube.com/watch?v=llpr5924N7E">Video</a></li>
        <li>Gregorio's Intro to REST <a href="https://www.youtube.com/watch?v=YCcAE2SCQ6k">Video</a></li>
        <li>Apigee's HATEOAS <a href="https://www.youtube.com/watch?v=6UXc71O7htc">Video</a> and <a href="https://pages.apigee.com/web-api-design-ebook-sr-register.html">Book</a></li>
    </ul>
</section>
{% endblock %}