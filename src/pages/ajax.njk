{% extends "layouts/main.njk" %}

{% block slides %}
<section>
    <h1>CMPUT 404</h1>
    <h3>Web Applications and Architecture</h3>
    <h2>Part 08: AJAX</h2>
    <p>
      <small>Created by <br>
        <a href="http://softwareprocess.es">Abram Hindle</a>
        (<a href="mailto:abram.hindle@ualberta.ca">abram.hindle@ualberta.ca</a>) <br>
        and Hazel Campbell (<a href="mailto:hazel.campbell@ualberta.ca">hazel.campbell@ualberta.ca</a>).<br>
        Copyright 2014-2023.
      </small>
    </p>
  </section>
  <section>
    <h3>AJAX</h3>
    <img class="stretch noborder" alt="AJAX" src="../images/ajax.png">
  </section>
  <section style="font-size: 80%;">
    <h3>What is AJAX?</h3>
    <ul>
      <li>Asynchronous JavaScript and <s>XML</s><ul>
        <li>Client Side</li>
        <li>Allows Javascript to make HTTP requests and use the results
        without redirecting the browser.</li>
        <li>Enables heavy-clients and lightweight webservices</li>
        <li>Can be used to avoid presentation responsibility on the
        webservice.</li>
        <li>JSON is a common replacement for XML</li>
        <li>Modern social media is heavy on Ajax</li>
      </ul>
      </li>
    </ul>
  </section>
  <section>
    <h3>AJAX Disadvantages</h3>
    <ul>
      <li>You have to manage History, Back button, Bookmarks in JS</li>
      <li>Security: browsers heavily restrict AJAX to prevent abuse
        <ul><li>Same-Origin Policy</ul></li>
      </li>
      <li>Even more HTTP requests, CPU and RAM</li>
    </ul>
  </section>
  <section>
    <h3>Making Requests</h3>
    <p>Use JS to make an HTTP request and get the content</p>
    <ul>
      <li>Old school: <var>new XMLHttpRequest()</li>
      <li>Modern: <em>Fetch API</em>
        <ul>
          <li><var>new Request("some-url");</var>
          <li>Promises!</li>
          <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API</a></li>
        </ul>
      </li>
    </ul>
  </section>
  <section>
    <h3>Fetch API</h3>
    <blockquote>
      <img 
        class="centered" 
        id="fetchexample" 
        alt="Stop trying to make fetch happen!"
        height="400">
      <cite><em>Mean Girls.</em> Paramount Home Entertainment, 2005. Performed by Rachel McAdams.</cite>
    </blockquote>
    <button type="button" onclick="fetchExample()">Fetch!</button>
  </section>
  <section>
    <pre><code class="html">{% filter prexample %}
      <blockquote>
        <img height="400" class="centered" id="fetchexample" 
          alt="Stop trying to make fetch happen!">
        <cite><em>Mean Girls.</em> Paramount Home Entertainment, 2005. Performed by Rachel McAdams.</cite>
        <button type="button" onclick="fetchExample()">Fetch!</button>
      {% endfilter %}</blockquote>
    </code></pre>
    <script>
        function fetchExample() {
          // https://developer.mozilla.org/en-US/docs/Web/API/Request/Request#Example 2019-02-14
          var img = document.querySelector("img#fetchexample");
          var request = new Request("fetch.gif");
          var promise1 = fetch(request);
          var promise2 = promise1.then(function(response) {
            console.log("Got headers!");
            return response.blob(); // return a promise for raw binary data
          });
          promise2.then(function(blob) {
            console.log("Got data blob!");
            var objectURL = URL.createObjectURL(blob);
            img.src = objectURL;
          });
        }
        // Note in the DOM the img's src= attribute after running!</code></pre>
      </script>
    <pre><code class="javascript">{% filter prexample %}
        function fetchExample() {
            // https://developer.mozilla.org/en-US/docs/Web/API/Request/Request#Example 2019-02-14
            var img = document.querySelector("img#fetchexample");
            var request = new Request("../images/fetch.gif");
            var promise1 = fetch(request);
            var promise2 = promise1.then(function(response) {
                console.log("Got headers!");
                return response.blob(); // return a promise for raw binary data
            });
            promise2.then(function(blob) {
                console.log("Got data blob!");
                var objectURL = URL.createObjectURL(blob);
                img.src = objectURL;
            });
        }
        // Note in the DOM the img's src= attribute after running!</code></pre>
    {% endfilter %}</code></pre>
  </section>
  <section data-visibility="hidden">
    <h3>Promises, Promises</h3>
    <script>
        function makeAPromise(data) {
          return new Promise((resolve, reject) => {
            resolve(data);
          });
        }
        function promiseExample() {
          // .then returns a NEW promise
          var promise1 = makeAPromise("X");
          var promise2 = promise1.then((data2) => {
            // inner function gets called after the promise is resolved
            alert("data2: " + data2);
            return "Y";
          });
          // .then calls its argument with the return value of the
          //     previous promises's callback function
          var promise3 = promise2.then((data3) => {
            alert("data3: " + data3);
          });
        }
      </script>
    <pre><code class="javascript">{% filter prexample %}
        function makeAPromise(data) {
            return new Promise((resolve, reject) => {
              resolve(data);
            });
          }
          function promiseExample() {
            // .then returns a NEW promise
            var promise1 = makeAPromise("X");
            var promise2 = promise1.then((data2) => {
              // inner function gets called after the promise is resolved
              alert("data2: " + data2);
              return "Y";
            });
            // .then calls its argument with the return value of the
            //     previous promises's callback function
            var promise3 = promise2.then((data3) => {
              alert("data3: " + data3);
            });
          }
      {% endfilter %}</code></pre>
    <button type="button" onclick="promiseExample()">promiseExample()</button>
  </section>
  <section style="font-size: 60%;">
    <h3>Callbacks: Eventually...</h3>
    <pre><code class="javascript"><span class="a01">class Tank {
  <span class="a05">constructor(<span class="v1">onEmpty</span>) {
    this.units = 10;
    <span class="v1">this.onEmpty = onEmpty;</span>
  }</span>
  pump() {
    if (<span class="a08"><span class="a11">!this.empty()</span></span>) { <span class="a09">this.units -= 1;</span> }
    else { <span class="a12"><span class="v1">this.onEmpty</span>(this, this.units);</span> }
  }
  empty() { return this.units &lt;= 0; }
}</span>
<span class="a02">const drain = (tank) =&gt; {
  <span class="a07">while (!tank.empty()) { tank.pump(); }</span>
  <span class="a10">tank.pump();</span>
}</span>
<span class="a06">drain(<span class="a04">new Tank(<span class="a03 v1">(tank, units) =&gt; {
  <span class="a13">console.log(&quot;tank&quot;, tank);</span>
}</span>)</span>);</span></code></pre>
  </section>
  <section>
    <h3>Callbacks: Immediate</h3>
    <pre><code class="javascript"><span class="a01">const cup = (<span class="v1">faucet</span>) =&gt; {
  <span class="a06">const aCup = { filled: &quot;air&quot;, }</span>
  if (<span class="a07 v1">faucet</span>) { <span class="a08 v1">faucet(aCup);</span> }
  <span class="a10">return aCup;</span>
}</span>
<span class="a02">const waterCup = () =&gt; {
  <span class="a04 v1">const waterFaucet = (cup) =&gt; {
    <span class="a09">cup.filled = &quot;water&quot;;</span>
  }</span>
  <span class="a11">return <span class="a05">cup(<span class="v1">waterFaucet</span>)</span>;</span>
}</span>
<span class="a12">console.log(<span class="a03">waterCup()</span>);</span></code></pre>
  </section>
  <section>
    <h3>Callbacks: Callbacks</h3>
    <pre><code class="javascript">{% filter prexample %}
      const cup = (faucet) => {
        const aCup = {
          filled: "air",
        };
        const setFluid = (fluid) => {
          aCup.filled = fluid;
        };
        if (faucet) {
          faucet(setFluid);
        }
        return aCup;
      }
      const waterCup = () => {
        const waterFaucet = (fluidSetter) => {
          fluidSetter("water");
        }
        return cup(waterFaucet);
      } 
      console.log(waterCup());
    {% endfilter %}</code></pre>
  </section>
  <section>
    <h3>Callbacks: Custom Constructor</h3>
    <pre><code class="javascript">{% filter prexample %}
      class Cup {
        constructor(faucet) {
          this.filled = "air";
          const setFluid = (fluid) => {
            this.filled = fluid;
          };
          if (faucet) {
            faucet(setFluid);
          }
        }
      }
      const waterCup = () => {
        const waterFaucet = (fluidSetter) => {
          fluidSetter("water");
        }
        return new Cup(waterFaucet);
      } 
      console.log(waterCup());
    {% endfilter %}</code></pre>
  </section>
  <section>
    <h3>Promises: Custom Constructor</h3>
    <pre><code class="javascript">{% filter prexample %}
      class Promise {
        constructor(customizer) {
          // ...
          this.resolvedTo = undefined;
          // ...
          const resolve = (value) => {
            this.resolvedTo = value;
            // ...
          };
          // const reject = (...) => { ... }
          if (customizer) {
            customizer(resolve, reject);
          }
        }
      }
      const waterPromise = () => {
        return new Promise((resolve, reject) => {
          resolve("water");
        });
      } 
      console.log(waterPromise());
    {% endfilter %}</code></pre>
  </section>
  <section>
    <h3>Timers</h3>
    <ul>
     <li><var>window.setInterval</var> lets you run a function every so many milliseconds.</li>
     <li><var>window.setTimeout</var> lets you run a function once after so many milliseconds.</li>
    </ul>
  </section>
  <section>
    <h3>Promises Execution Order</h3>
    <script>
      function promiseTimerExample() {
        console.log("1. First line of promiseTimerExample");
        const promise1 = new Promise((resolve, reject) => {
          console.log("2. In new Promise #1 executor function")
          window.setTimeout(() => {
            console.log("4. In window.setTimeout callback function")
            resolve(333);
          }, 1000);
        })
        const promise2 = promise1.then((value) => {
          console.log("5. In promise1.then function", value);
          return 777;
        });
        const promise3 = promise2.then((value) => {
          console.log("6. In promise2.then function", value);
        })
        console.log("3. LAST line of promiseTimerExample");
      }
    </script>
    <pre><code class="javascript">{% filter prexample %}
      function promiseTimerExample() {
        console.log("1. First line of promiseTimerExample");
        const promise1 = new Promise((resolve, reject) => {
          console.log("2. In new Promise #1 executor function")
          window.setTimeout(() => {
            console.log("4. In window.setTimeout callback function")
            resolve(333);
          }, 1000);
        })
        const promise2 = promise1.then((value) => {
          console.log("5. In promise1.then "onfulfilled" function", value);
          return 777;
        });
        const promise3 = promise2.then((value) => {
          console.log("6. In promise2.then "onfulfilled" function", value);
        })
        console.log("3. LAST line of promiseTimerExample");
      }
    {% endfilter %}</code></pre>
  <button type="button" onclick="promiseTimerExample()">promiseTimerExample()</button>
  </section>
  <section>
    <h3>Function Passed to <code>then</code> Can Return Promise</h3>
    <script>
      function promise2TimerExample() {
        console.log("1. First line of promiseTimerExample");
        const promise1 = new Promise((resolve, reject) => {
          console.log("2. In new Promise #1 executor function")
          window.setTimeout(() => {
            console.log("4. In window.setTimeout callback function")
            resolve(333);
          }, 1000);
        })
        const promise2 = promise1.then((value) => {
          console.log("5. In promise1.then function", value);
          return new Promise((resolve, reject) => {
            window.setTimeout(() => {
              console.log("6. Second timer timed out");
              resolve(777);
            }, 2000);
          });
        });
        const promise3 = promise2.then((value) => {
          console.log("7. In promise2.then function", value);
        })
        console.log("3. LAST line of promiseTimerExample");
      }
    </script>
    <pre><code class="javascript">{% filter prexample %}
      function promise2TimerExample() {
        console.log("1. First line of promiseTimerExample");
        const promise1 = new Promise((resolve, reject) => {
          console.log("2. In new Promise #1 executor function")
          window.setTimeout(() => {
            console.log("4. In window.setTimeout callback function")
            resolve(333);
          }, 1000);
        })
        const promise2 = promise1.then((value) => {
          console.log("5. In promise1.then function", value);
          return new Promise((resolve, reject) => {
            window.setTimeout(() => {
              console.log("6. Second timer timed out");
              resolve(777);
            }, 2000);
          });
        });
        const promise3 = promise2.then((value) => {
          console.log("7. In promise2.then function", value);
        })
        console.log("3. LAST line of promiseTimerExample");
      }
    {% endfilter %}</code></pre>
  <button type="button" onclick="promise2TimerExample()">promise2TimerExample()</button>
  </section>
  <section style="font-size: 85%">
    <h3>Promise dot-chaining</h3>
    <pre><code class="javascript">{% filter prexample %}
      var request = new Request("images/fetch.gif");
      var promise1 = fetch(request);
      var promise2 = promise1.then(function(response) {
        console.log("Got headers!");
        return response.blob(); // return a promise for raw binary data
      });
      promise2.then(function(blob) {
        console.log("Got data blob!");
        var objectURL = URL.createObjectURL(blob);
        img.src = objectURL;
      });
    }
    {% endfilter %}</code></pre>
    <p>is the same as</p>
    <pre><code class="javascript">{% filter prexample %}
      var request = new Request("images/fetch.gif");
      fetch(request).then(function(response) {
        console.log("Got headers!");
        return response.blob(); // return a promise for raw binary data
      }).then(function(blob) {
        console.log("Got data blob!");
        var objectURL = URL.createObjectURL(blob);
        img.src = objectURL;
      });
    {% endfilter %}</code></pre>
  </section>
  <section>
    <h3>Fetching JSON</h3>
    <p>Let's make a generic JSON GET function</p>
    <script>
        function fetchJSON(url) {
          var request = new Request(url);
          return fetch(request).then((response) => {
            if (response.status === 200) { // OK
              return response.json(); // return a Promise
            } else {
              alert("Something went wrong: " + response.status);
            }
          });
        }

    </script>
    <pre><code class="javascript">{% filter prexample %}
        function fetchJSON(url) {
          var request = new Request(url);
          return fetch(request).then((response) => {
            if (response.status === 200) { // OK
              return response.json(); // return a Promise
            } else {
              alert("Something went wrong: " + response.status);
            }
          });
        }
    {% endfilter %}</code></pre>
  </section>
  <section style="font-size: 70%">
    <h3>Do something with the JSON</h3>
    <script>
        var getterID; // global
        function startGetting() {
          getterID = window.setInterval(() => { // callback
            var now = new Date();
            var s = 1 + (now.getSeconds() % 4); // remainder
            var url = 'json/' + s + ".json" // 1.json 2.json 3.json...
            fetchJSON(url).then((json) => { // another callback
              console.log(json); // browser turned the JSON into an object
              text = json.message; // it has properties
              document.querySelector("#ajaxy").innerText = text;
            });
          }, 1000); // 1 second or 1000ms
        }
        function stopGetting() {
          window.clearInterval(getterID);
        }
    </script>
    <pre><code class="javascript">{% filter prexample %}
        var getterID; // global
        function startGetting() {
          getterID = window.setInterval(() => { // callback
            var now = new Date();
            var s = 1 + (now.getSeconds() % 4); // remainder
            var url = s + ".json" // 1.json 2.json 3.json...
            fetchJSON(url).then((json) => { // another callback
              console.log(json); // browser turned the JSON into an object
              text = json.message; // it has properties
              document.querySelector("#ajaxy").innerText = text;
            });
          }, 1000); // 1 second or 1000ms
        }
        function stopGetting() {
          window.clearInterval(getterID);
        }
    {% endfilter %}</code></pre>
    <pre><code class="html">{% filter prexample %}
      <button type="button" onclick="startGetting()">Start Getting</button>
      <button type="button" onclick="stopGetting()">Stop Getting</button>
      <blockquote id="ajaxy"></blockquote>
    {% endfilter %}</code></pre>
    <button type="button" onclick="startGetting()">Start Getting</button><button type="button" onclick="stopGetting()">Stop Getting</button>
    <blockquote id="ajaxy"></blockquote>
  </section>
  <section>
    <h3>JSON</h3>
    <ul>
      <li>JavaScript Object Notation</li>
      <li>Strict subset of JavaScript</li>
      <li><a href="http://json.org/">http://json.org/</a>
      <li><var>JSON.parse</var> parses JSON text into an Object</li>
      <li><var>JSON.stringify</var> turns an Object into JSON text</li>
    </ul>
  </section>
  <section>
    <script>
        function stringifyExample() {
          var obj = { "food":"hotdog", 
                      "condiments":["ketchup","mustard","cheese"],
                      "sausage":"weiner"
          };
          document.querySelector("#hotdog").value = 
            JSON.stringify(obj, null, " "); // pretty print
        }
        function parseExample() {
          text = document.querySelector("#hotdog").value;
          var newObj = JSON.parse(text); 
          document.querySelector("#sausage").innerText = newObj.sausage;
        }
      </script>
    <pre><code class="javascript">{% filter prexample %}
        function stringifyExample() {
            var obj = { "food":"hotdog", 
                        "condiments":["ketchup","mustard","cheese"],
                        "sausage":"weiner"
            };
            document.querySelector("#hotdog").value = 
              JSON.stringify(obj, null, " "); // pretty print
          }
          function parseExample() {
            text = document.querySelector("#hotdog").value;
            var newObj = JSON.parse(text); 
            document.querySelector("#sausage").innerText = newObj.sausage;
          }
      {% endfilter %}</code></pre>
    <button type="button" onclick="stringifyExample()">stringifyExample()</button>
    <button type="parse" onclick="parseExample()">parseExample()</button><br>
    <textarea id="hotdog" rows="10" cols="80"></textarea>
    <blockquote id="sausage"></blockquote>
  </section>
  <section>
    <h3>Design With AJAX</h3>
    <p>Design Suggestions:</p>
    <ul>
      <li><a href="http://softwareas.com/ajax-patterns">Minimize AJAX requests and traffic</a>
      </li>
      <li>Don't hook into every event, <a href="http://serversideguy.blogspot.ca/2004/12/google-suggest-dissected.html">use timeouts?</a>
      </li>
      <li>Use to ease page state transitions
      </li>
    </ul>      
  </section>
  <section>
    <p>What are your events?</p>
    <ul>
      <li>Per user input?</li>
      <li>Per user commit?</li>
      <li>Time based?</li>
      <li>Per Server action?<ul>
        <li>Polling?</li>
      </ul>
      </li>
      <li>Data?</li>
      <li>Content oriented?</li>
      <li>Messages?</li>
      <li>Multimedia?</li>
    </ul>
  </section>
  <section>
    <h3>AJAX Observer Pattern</h3>
    <ul>
      <li>Observer pattern is where an observable keeps a collection of observers (listeners) and notifies those observers if anything changed by sending an update message.</li>
      <li>This works great with AJAX if the observable is held client side in a browser and the observer is client side in the browser! Go ahead!</li>
    </ul>
  </section>
  <section>
    <h4>AJAX Observer Pattern</h4>
    <img class="centered noborder" src="../images/observer.svg" alt="Observer UML Diagram">
  </section>
  <section>
    <h4>AJAX Observer Pattern</h4>
    <ul>
      <li>Still works well with observable in browser and the observers server-side, the client simply notifies via the server's observers whenever an update occurs (but it should also communicate some lightweight state).</li>
      <li>Due to the lack of a client-side HTTP server it is problematic to do the observer pattern with client side observers.</li>
    </ul>
  </section>
  <section style="font-size: 90%;">
    <h3>Observing the Server</h3>
      <ul>
        <li>HTTP is stateless, so a client needs to communicate somehow all of
        the objects it is observing. <ul>
          <li>Perhaps a serverside Observer proxy that stores observables for a
          client</li>
        </ul>
        </li>
        <li>Clients need to poll the server to check if there are updates. For
        the observer pattern to work this polling should allow the server to
        send update commands.</li>
        <li>Due to bandwidth concerns and latency concerns, an update from the
        server should probably include relevant data  </li>
      </ul>
  </section>
  <section>
    <h4>Observing the Server</h4>
    <ul>
      <li>Fighting against:<ul>
        <li>Latency</li>
        <li>Bandwidth</li>
        <li>Lack of communication channels</li>
        <li>Lack of ability to push messages to a client</li>
        <li>Polling</li>
        <li>Timer smashing</li>
      </ul>
      </li>
    </ul>
  </section>
  <section>
    <h4>Observing the Server</h4>
    <p>Solutions?</p>
    <ul>
      <li>Polling: the most common</li>
      <li>Service Workers + Push API: <a href="https://caniuse.com/?search=push%20api">not supported in all browsers</a></li>
      <li>Comet "long polling": difficult server-side support</li>
      <li>Websockets: need to make a websocket server</li>
    </ul>
  </section>
  <section>
    <h3>Polling the Server</h3>
    <ul>
      <li>Don't send too many requests
      </li>
      <li>Batch (bundle together) requests to the server</li>
      <li>Minimize the number of timers and the frequency of timers
        <ul>
          <li>E.g. if drawing, a user doesn't need more than 30FPS!</li>
        </ul>
      <li>Don't make requests until the previous request finished...</li>
      <li>Don't make requests you don't have to</li>
    </ul>
  </section>
  <section>
    <h3>AJAX Resources</h3>
    <ul>
      <li><a href="http://softwareas.com/ajax-patterns">AJAX Patterns: Design Patterns for AJAX Usability</a> --
      Michael Mahemoff<ul>
        <li><a href="http://ajaxpatterns.org/">AJAX Pattern</a></li>
        <li><a href="http://proquest.safaribooksonline.com/book/web-development/ajax/0596101805">O'Reilly Book</a></li>
      </ul>
      </li>
      <li><a href="http://serversideguy.blogspot.ca/2004/12/google-suggest-dissected.html">Google Dissected</a></li>
      <li><a href="https://www.youtube.com/watch?v=sZqpmRlOjU8">Ajax Frameworks and Design Patterns
      Survey</a> (video)</li>
    </ul>
  </section>
  <section>
    <h3>More JavaScript: <var>async</var> and <var>await</var></h3>
    <ul>
      <li><var>async</var> functions
        <ul>
          <li>Return a promise!</li>
        </ul>
      </li>
      <li><var>await</var> in async functions
        <ul>
          <li>blocks code execution (stop and wait for the promise to resolve)</li>
        </ul>
      </li>
    </ul>
  </section>
  <section style="font-size: 75%">
    <h3>Async Await Example</h3>
    <script>
        var getterID2; // global
        async function get2() {
          var now = new Date();
          var s = 1 + (now.getSeconds() % 4); // remainder
          var url = "../" + s + ".json" // 1.json 2.json 3.json...
          var json = await fetchJSON(url);
          console.log(json); // browser turned the JSON into an object
          var text = json.message; // it has properties
          document.querySelector("#ajaxy2").innerText = text;
        }
        function startGetting2() {
          getterID2 = window.setInterval(get2, 1000); // 1 second or 1000ms
        }
        function stopGetting2() {
          window.clearInterval(getterID2);
        }
      </script>
    <pre><code class="javascript">{% filter prexample %}
        var getterID2; // global
        async function get2() {
          var now = new Date();
          var s = 1 + (now.getSeconds() % 4); // remainder
          var url = "../" + s + ".json" // 1.json 2.json 3.json...
          var json = await fetchJSON(url);
          console.log(json); // browser turned the JSON into an object
          var text = json.message; // it has properties
          document.querySelector("#ajaxy2").innerText = text;
        }
        function startGetting2() {
          getterID2 = window.setInterval(get2, 1000); // 1 second or 1000ms
        }
        function stopGetting2() {
          window.clearInterval(getterID2);
        }
    {% endfilter %}</code></pre>
    <pre><code class="html">{% filter prexample %}
      <button type="button" onclick="startGetting2()">Start Getting</button>
      <button type="button" onclick="stopGetting2()">Stop Getting</button>
      <blockquote id="ajaxy2"></blockquote>
    {% endfilter %}</code></pre>
    <button type="button" onclick="startGetting2()">Start Getting</button><button type="button" onclick="stopGetting2()">Stop Getting</button>
    <blockquote id="ajaxy2"></blockquote>
  </section>
  <section>
    <h3>async/await Disadvantages</h3>
    <ul>
      <li>Execution stops at await, instead of continuing in parallel
        <ul>
          <li>In threads if the browser supports it</li>
        </ul>
      </li>
      <li>With <var>.then(...)</var> in a loop, the loop completes instantly
        and each callback function can run in parallel as soon as its ready</li>
      <li>With <var>await</var> in a loop, the loop will keep stopping each time
        it gets to the await</li>
    </ul>
  </section>
  <section>
    <h3>Observer Example</h3>
    <ul>
      <li>in <var>examples/ObserverExampleAJAX</var>
      </li>
      <li><a href="https://github.com/uofa-cmput404/cmput404-slides/tree/master/examples/ObserverExampleAJAX">https://github.com/uofa-cmput404/cmput404-slides/tree/master/examples/ObserverExampleAJAX</a></li>
    </ul>
  </section>
{% endblock %}