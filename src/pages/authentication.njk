{% extends "layouts/main.njk" %}

{% block slides %}
<section>
    <h1>CMPUT 404</h1>
    <h3>Web Applications and Architecture</h3>
    <h2>Authentication</h2>
    <p>
      <small>Created by <br>
        <a href="http://softwareprocess.es">Abram Hindle</a>
        (<a href="mailto:abram.hindle@ualberta.ca">abram.hindle@ualberta.ca</a>) <br>
        and Hazel Campbell (<a href="mailto:hazel.campbell@ualberta.ca">hazel.campbell@ualberta.ca</a>).<br>
        Copyright 2014-2023.
      </small>
    </p>
</section>
<section>
    <h3>Web Authentication</h3>
    <ul>
        <li>Authentication methods supported by Web Standards</li>
    </ul>
</section>
<section>
    <h3>HTTP Basic Auth</h3>
    <ul>
        <li>Created by Ari Luotonen in <b>1993</b>.</li>
        <li>Username and password not hidden by HTTP</li>
        <li>You must use another encryption layer (TLS) below HTTP (HTTPS) for security!</li>
    </ul>
</section>
<section>
    <h3>HTTP Basic Auth</h3>
    <ul>
        <li>Easiest to implement</li>
        <li>Stateless</li>
        <li>Response: <code>401 Unauthorized</code> & <code>WWW-Authenticate: Basic</code> header.</li>
        <li>Request: <code>Authorization: Basic</code> header</li>
    </ul>
</section>
<section>
    <h3>HTTP Basic Auth</h3>
    <ul>
        <li>The username and password are <em>encoded</em> but not <em>encrypted</em></li>
    </ul>
    <pre><code>{% filter prexample %}
        function encodeBasic(username, password) {
            utf8bytes = new TextEncoder().encode(username + ":" + password);
            binaryString = String.fromCodePoint(...utf8bytes);
            return btoa(binaryString);
        }
        function decodeBasic(base64String) {
            binaryString = atob(base64String);
            utf8bytes = Uint8Array.from(binaryString, (c) => c.codePointAt(0));
            both = new TextDecoder().decode(utf8bytes);
            seperator = both.indexOf(':');
            return [both.slice(0,seperator), both.slice(seperator+1)];
        }
    {% endfilter %}</code></pre>
</section>
<section style="font-size: 90%;">
    <h3>HTTP Basic Auth</h3>
    <ul>
        <li>Cannot customize username/password prompt</li>
        <li>Browser will remember to keep sending auth</li>
        <li>All files an subdirs <em>at</em> or <em>below</em> will be considered authenticated
            <ul>
                <li>If we authenticate at <code>/stuff/private/index.html</code>:</li>
                <li><code>/stuff/private/1</code> browser will assume is authenticated</li>
                <li><code>/stuff/private/folder/banana.html</code> browser will assume is authenticated</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3 style="font-size: 90%;">
        HTTP Basic Authentication
    </h3>
    <img src="/images/basic_auth.svg" class="stretch">
</section>
<section style="font-size: 90%;">
    <h3>HTTP Digest Auth</h3>
    <ul>
        <li>Defined in RFC 2069, Franks et al, <b>1997</b>.</li>
        <li>Uses cryptographic hashes, designed to hide username & password...
            <ul>
                <li>But it uses MD5 which is broken.</li>
                <li>Secure SHA-256 hash added only in 2021 (firefox) and 2023 (chrome)</li>
            </ul>
        </li>
        <li>So... You must use another encryption layer (TLS) below HTTP (HTTPS) for security!</li>
        <li>Not really used...</li>
    </ul>
</section>
<section style="font-size: 90%;">
    <h3>HTTP Digest Auth</h3>
    <ul>
        <li>Doesn't prevent tampering with content, headers, paths, ...</li>
        <li>Just use TLS!</li>
    </ul>
</section>
<section>
    <h3 style="font-size: 90%;">
        Session Cookie Authentication
    </h3>
    <img src="/images/sessionauth.svg" class="stretch">
</section>
<section>
    <h3 style="font-size: 90%;">
        Signed Token Authentication
    </h3>
    <img src="/images/token_auth.svg" class="stretch">
</section>
<section>
    <h3>Signed Token Authentication</h3>
    <ul>
        <li>Response: <code>401 Unauthorized</code> & <code>WWW-Authenticate: Bearer</code> header.</li>
        <li>Request: <code>Authorization: Bearer</code> header</li>
        <li>Can use <code>Set-Cookie</code> and <code>Cookie</code> to transfer token
            <ul>
                <li>But... it can be tripped up by CORS rules!</li>
                <li><code>Access-Control-Allow-Origin: </code> and friends.</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3>JSON Web Tokens</h3>
    <pre><code>{% filter prexample %}
        {
            "alg": "HS256",
            "typ": "JWT"
        }{
            "sub": "user_id=1234567890",
            "custom": "whatever",
            "iat": 1698689742
        }
    {% endfilter %}</code></pre>
    <ul>
        <li>Base64 Encoded + "." + Base64 cryptographic signature</li>
    </ul>
    <p><a href="https://jwt.io/">JWT Demo</a></p>
</section>
<section style="font-size: 90%;">
    <h3>The OAuths</h3>
    <ul>
        <li>Allows a user to tell <em>authorization</em> server it's ok to allow a <em>client</em> (which can be a server) to access <em>resource</em> server API on their behalf.</li>
        <li>Example: User allows their email application to access gmail on their behalf.
            <ul>
                <li>Client: email application</li>
                <li>Authorization server: accounts.google.com</li>
                <li>Resource server: gmail.com</li>
            </ul>
        </li>
    </ul>
</section>
<section style="font-size: 90%;">
    <h3>The OAuths</h3>
    <ul>
        <li>Allows a user to tell <em>authorization</em> server it's ok to allow a <em>client</em> (which can be a server) to access <em>resource</em> server API on their behalf.</li>
        <li>Example: User allows their email application to access gmail on their behalf.
            <ul>
                <li>Client: super powered mail manager service $100/month guaranteed success (also a website/server, actually)</li>
                <li>Authorization server: accounts.google.com</li>
                <li>Resource server: gmail.com</li>
            </ul>
        </li>
    </ul>
</section>
<section>
    <h3 style="font-size: 80%;">OAuth 1</h3>
    <img class="stretch" src="/images/oauth1.png">
    <cite style="font-size: 50%;"><a href="https://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art014">https://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art014</a> Joshua Davies, 2012</cite>
</section>
<section>
    <h3 style="font-size: 80%;">OAuth 2</h3>
    <img class="stretch" src="/images/oauth2flow.png">
    <cite style="font-size: 50%;"><a href="https://www.soapui.org/docs/oauth2/oauth2-overview/">https://www.soapui.org/docs/oauth2/oauth2-overview/</a> Smartbear Software, 2023</cite>
</section>
<section>
    <h3>OAuth 1 vs 2</h3>
    <div class="columns">
        <div class="column">
            <ul>
                <li>More complicated</li>
                <li>More secure</li>
                <li>Slower</li>
                <li>Should be used over TLS</li>
                <li>RFC 5849</li>
            </ul>
        </div>
        <div class="column">
            <ul>
                <li>Easier to implement</li>
                <li>Less secure</li>
                <li>Faster (fewer steps)</li>
                <li>Must be used over TLS</li>
                <li>RFC 6749</li>
            </ul>
        </div>
    </div>
</section>
<section style="font-size: 80%;">
    <h3>OpenID Connect</h3>
    <ol>
        <li>Do OAuth 2.0
            <ul>
                <li>The site you are logging <b>into</b> is the client, AKA <em>Relying Party (RP)</em>.</li>
                <li>The site you are logging <b>in with</b> is the authorization server and resource server, AKA <em>Identity Provider (IDP)</em>.</li>
            </ul>
        </li>
        <li>
            Use OAuth 2.0 authorization to get a JWT from the IDP, which we then give to the RP as proof of who we are.
            <ul>
                <li>The thing we are AUTHORIZING the client/RP to do is request information about who we are, according to the IDP/authorization server.</li>
            </ul>
        </li>
    </ol>
</section>
<section>
    <h3 style="font-size: 80%;">OpenID Connect</h3>
    <img src="/images/oidc.svg" height="500px">
    <cite style="font-size: 50%;"><a href="https://learn.microsoft.com/en-us/entra/identity-platform/v2-protocols-oidc">https://learn.microsoft.com/en-us/entra/identity-platform/v2-protocols-oidc</a> Richards et al., 2023, Microsoft</cite>
</section>
<section style="font-size: 80%;">
    <h3>SAML</h3>
    <ul>
        <li>Like OpenID Connect but doesn't use OAuth or JWT, instead uses XML and its own thing</li>
        <li>Mostly used by academic institutions (such as the Unversity of Alberta)</li>
    </ul>
    <img class="stretch" src="/images/saml2flow.png">
    <cite style="font-size: 50%;"><a href="https://commons.wikimedia.org/wiki/File:Saml2-browser-sso-redirect-post.png">https://commons.wikimedia.org/wiki/File:Saml2-browser-sso-redirect-post.png</a> Ayungn, 2021, Wikimedia Commons</cite>
</section>
<section>
    <h3>Cookie: vs Authorization: Bearer</h3>
    <ul>
        <li>Both headers sent by the client</li>
    </ul>
    <div class="columns">
        <div class="column">
            <ul>
                <li>Automatically sent by browser</li>
                <li>Can run afoul of CORS rules</li>
                <li>Less control by your code</li>
            </ul>
        </div>
        <div class="column">
            <ul>
                <li>Only sent with AJAX when specified</li>
                <li>Less likely to run afoul of CORS rules</li>
                <li>Requires more code to use</li>
            </ul>
        </div>
    </div>
</section>
{% endblock %}